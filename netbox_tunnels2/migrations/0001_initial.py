# Generated by Django 4.1.7 on 2023-03-28 16:25

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import utilities.json


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('extras', '0084_staging'),
        ('dcim', '0167_module_status'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tunnel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=64)),
                ('status', models.CharField(default='pending-configuration', max_length=30)),
                ('tunnel_type', models.CharField(default='ipsec-tunnel', max_length=30)),
                ('src_address', models.CharField(blank=True, max_length=28)),
                ('dst_address', models.CharField(blank=True, max_length=28)),
                ('psk', models.CharField(blank=True, max_length=100)),
                ('comments', models.TextField(blank=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name_plural': 'Tunnels',
            },
        ),
        migrations.CreateModel(
            name='TunnelDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('device', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='device_of', to='dcim.device')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('tunnel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device', to='netbox_tunnels2.tunnel')),
            ],
        ),
    ]
